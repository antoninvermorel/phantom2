"""This file is an example of how manipulate the 'blobmodel' package to generate datasets to be tested on 'phantom2' particularly adding noise."""

import os
import numpy as np
import xarray as xr
from blobmodel import Model, BlobFactory, Blob, BlobShapeImpl, show_model

import matplotlib as mpl
import imageio_ffmpeg as iio_ffmpeg
# to use ffmpeg
mpl.rcParams['animation.ffmpeg_path'] = iio_ffmpeg.get_ffmpeg_exe()

# -------------------------------
# Custom Blob Factory
# -------------------------------
class CustomBlobFactory(BlobFactory):
    """Personalize factory to create blobs with specifical evolutions and characteristics."""

    def __init__(self) -> None:
        super().__init__()

    def sample_blobs(self, Ly, T, num_blobs, blob_shape, t_drain) -> list[Blob]:
        b_id = np.arange(1, num_blobs + 1)
        amp = [1.0] * num_blobs
        w_prop = [0.5, 0.75, 1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.5, 0.5]
        w_perp = [0.5, 0.75, 0.5, 0.5, 1.0, 1.0, 0.75, 0.75, 0.5, 0.5]
        vx = [1/3, 1, 0.75, 0, -1.5, -0.75, (-4.0+1.25/np.sqrt(2))/4.0, -(4.0-3.0)/4.0, 5/3, 0.0]
        vy = [-1/3, 0.5, 0.0, -0.75, 0.0, 0.0, (4.0-3.0)/4.0, (4.0-1.25/np.sqrt(2))/4.0, 1/3, 2.04]
        posx = [5/3, 0.0, 0.0, 3.0, 10, 10, 10.0, 7.0, 0.0, 7.5]
        posy = [25/3, 5.0, 2.5, 10.0, 8.0, 6.5, 3.0, 0.0, 1.0, -12.46]
        t_in = [0.0, 0.0, 13.0, 7.0, 13.0, 10.0, 0.0, 0.0, 3.0, 0]
        t_dr = [1.0e6] * num_blobs

        blobs = [
            Blob(
                blob_id=b_id[i],
                blob_shape=blob_shape,
                amplitude=amp[i],
                width_prop=w_prop[i],
                width_perp=w_perp[i],
                v_x=vx[i],
                v_y=vy[i],
                pos_x=posx[i],
                pos_y=posy[i],
                t_init=t_in[i],
                t_drain=t_dr[i],
            )
            for i in range(num_blobs)
        ]
        self._num_blobs = len(blobs)
        return blobs
    
    @property
    def num_blobs(self) -> int:
        """Return the number of blobs generated by this factory."""
        return self._num_blobs    
    
    def is_one_dimensional(self) -> bool:
        return False


# -------------------------------
# Utility: Add Gaussian Noise
# -------------------------------
def add_noise_to_dataset(ds: xr.Dataset, var_name: str = "n", relative_sigma: float = 0.1, seed: int | None = None) -> xr.Dataset:
    """Add white Gaussian noise to a dataset variable (default 'n')."""
    if var_name not in ds:
        raise ValueError(f"Dataset doesn't have the variable '{var_name}'.")
    
    rng = np.random.default_rng(seed)
    max_val = ds[var_name].max().item()
    sigma = relative_sigma * max_val
    
    # # DEBUG tests
    # print("min density before noise:", ds['n'].min().item())
    # print("max density before noise:", ds['n'].max().item())
    
    noise = sigma * rng.standard_normal(ds[var_name].shape)
    ds_noisy = ds.copy()
    ds_noisy[var_name].data += noise
    ds_noisy[var_name].data = np.clip(ds_noisy[var_name].data, 0, None)
    
    # # DEBUG tests
    # print("min density after noise:", ds_noisy['n'].min().item())
    # print("max density after noise:", ds_noisy['n'].max().item())
    
    return ds_noisy


# -------------------------------
# Factory & Model Creation
# -------------------------------
def create_blobmodel(Nx: int, Ny: int, Lx: float, Ly: float, dt: float, T: float, blob_factory: BlobFactory, num_blobs: int=None) -> Model:
    """Create and return a blobmodel using the given factory"""
    if blob_factory is None:
        if num_blobs is None:
            num_blobs = 10
        from blobmodel import DefaultBlobFactory
        blob_factory = DefaultBlobFactory()
    
    # Determine num_blobs from the factory if it's a CustomBlobFactory
    elif isinstance(blob_factory, CustomBlobFactory):
        num_blobs = blob_factory.num_blobs
    
    # Ensure num_blobs is defined
    if num_blobs is None:
        raise ValueError("num_blobs must be specified for this factory.")
    
    bm = Model(
        Nx=Nx,
        Ny=Ny,
        Lx=Lx,
        Ly=Ly,
        dt=dt,
        T=T,
        num_blobs=num_blobs,
        blob_factory=CustomBlobFactory(),
        blob_shape=BlobShapeImpl(),  # default blob shape (gaussian)
        labels="individual",
        label_border=0.2,
        verbose=False
    )
    return bm


# -------------------------------
# Main
# -------------------------------
def main():
    # User parameters
    Nx, Ny = 200, 200
    Lx, Ly = 10.0, 10.0
    dt = 0.1
    T = 20
    num_blobs = 10
    noise_sigma = 0  # relative noise, max 5%

    file_name = "dataset_phantom_blobmodel_noisy.nc"
    if os.path.exists(file_name):
        os.remove(file_name)

    # blobmodel creation
    bm = create_blobmodel(Nx, Ny, Lx, Ly, dt, T, CustomBlobFactory, num_blobs)
    # Dataset generation
    ds = bm.make_realization(file_name=file_name, speed_up=True, error=1e-6)
    # Noise adding
    ds_noisy = add_noise_to_dataset(ds, var_name="n", relative_sigma=noise_sigma)
    ds_noisy.to_netcdf(file_name)

    # Visualisation
    show_model(
        dataset=ds_noisy,
        interval=100,
        gif_name=f"phantom_blobmodel_noisy_{Nx}x{Ny}.gif",
        fps=10
    )


if __name__ == "__main__":
    main()




